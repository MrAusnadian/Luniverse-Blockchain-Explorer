@page "/Account/{AccountHash}"
@inject IEthereumService _ethereumService 

<div class="container">
    <div class="row">
        <h2>
            Address: @AccountHash
        </h2>
    </div>
    @if (_hasLoaded)
    {
        <p>Account Balance: @Web3.Convert.FromWei(_accountBalance) Ether</p>
        <h4>
            Transactions From/To this Address in the last 10 Blocks:
        </h4>
        @if (_transactionsForAccount == null || _transactionsForAccount.Count == 0)
        {
            <p>
                No transactions on the last 10 blocks for the Address @AccountHash
            </p>
        }
        else
        {
            <div class="scrollmenu">
                <table>
                    <tr>
                        <th>Tx Hash</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Amount (Ether)</th>
                    </tr>
                    @foreach (Transaction transaction in _transactionsForAccount)
                    {
                        <tr>
                            <td><a href="/Transaction/@transaction.TransactionHash">@transaction.TransactionHash</a></td>
                            <td>@transaction.From</td>
                            <td>@transaction.To</td>
                            <td>@Web3.Convert.FromWei(transaction.Value)</td>
                        </tr>
                    }
                </table>
            </div>
        }
    }
    else
    {
        <p>
            Loading...
        </p>
    }
</div>


@code {
    [Parameter]
    public string AccountHash { get; set; }
    private bool _hasLoaded = false;
    private List<Transaction> _transactionsForAccount;
    private HexBigInteger _accountBalance;

    protected override async Task OnInitializedAsync()
    {

        _accountBalance = await _ethereumService.GetAddressBalance(AccountHash);
        _transactionsForAccount = await _ethereumService.GetTransactionsByAccount(AccountHash);
        _hasLoaded = true;
    }
}
