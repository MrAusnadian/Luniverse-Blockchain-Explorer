@page "/"
@inject IEthereumService _ethereumService 
@inject NavigationManager _navigationManager

<div class="container">
    <div class="row">
        <div class="col">
            <h2>Ethereum Blockchain Explorer</h2>
        </div>
        <div class="col">
            <p>
                Latest Block Number: @_latestBlockNumber
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <div class="row">
                <input @bind-value="@_search" @bind-value:event="oninput" placeholder="Address, Tx Hash or Block Number"/>
                <button @onclick="GetBlockInfo">
                    Search!
                </button>
            </div>
            @if (_invalidParse)
            {
                <div class="row">
                    <label>Invalid Address, Block Number or Transaction Hash</label>
                </div>
            }
        </div>
    </div>
    <div class="row">
        @if (_latestBlockNumber != null)
        {
            <LatestBlocksAndTransactions LatestBlockNumber="_latestBlockNumber"/>
        }
    </div>
</div>

@code {
    private Nethereum.Hex.HexTypes.HexBigInteger _latestBlockNumber = null;
    private string _search;
    private bool _invalidParse = false;

    private bool _foundAccount = false;
    private bool _foundBlock = false;
    private bool _foundTransaction = false;

    protected override async Task OnInitializedAsync()
    {
        _latestBlockNumber = await _ethereumService.GetLatestBlockNumber();
    }

    public async Task GetBlockInfo()
    {
        try
        {
            var blocks = await _ethereumService.GetBlockInfo(new HexBigInteger(_search));
            if (blocks != null)
            {
                _foundBlock = true;
            }
        }
        catch
        {
            _foundBlock = false;
        }
        if (_foundBlock)
        {
            _invalidParse = false;
            _navigationManager.NavigateTo($"/Block/{Int32.Parse(_search)}");
        }
        try
        {
            var account = await _ethereumService.GetAddressBalance(_search);
            if (account != new HexBigInteger(0))
            {
                _foundAccount = true;
            }
        }
        catch
        {
            _foundAccount = false;
        }
        if (_foundAccount)
        {
            _invalidParse = false;
            _navigationManager.NavigateTo($"Account/{_search}");
        }
        try
        {
            var transaction = await _ethereumService.GetTransaction(_search);
            if (transaction != null)
            {
                _foundTransaction = true;
            }
        }
        catch
        {
            _foundTransaction = false;
        }
        if (_foundTransaction)
        {
            _invalidParse = false;
            _navigationManager.NavigateTo($"/Transaction/{_search}");
        }
        else
        {
            _invalidParse = true;
        }
    }
}
